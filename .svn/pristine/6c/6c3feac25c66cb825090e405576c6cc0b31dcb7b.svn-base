package Controllers;

import DAO.DAOProduto;
import Mapeamentos.Produto;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.json.JSONArray;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class CadastroProdutosController {

    @RequestMapping("cadastroProdutos")
    public String CarregaCadastroProdutos(Model model) {
        model.addAttribute("Produto", new Produto());
        return "cadastroProdutos";
    }

    @RequestMapping("editarProdutos")
    public String CarregaEditarProdutos(Model model,
            @RequestParam(value = "codigo") String codigo) {
        DAOProduto dao = new DAOProduto();

        model.addAttribute("Produto", dao.buscarPeloCodigo(codigo));
        return "editarProdutos";
    }

    @RequestMapping("excluirProdutos")
    public String CarregaExcluirProdutos(Model model,
            @RequestParam(value = "codigo") String codigo) {
        DAOProduto dao = new DAOProduto();
        model.addAttribute("Produto", new Produto());

        Produto produto = dao.buscarPeloCodigo(codigo);
        dao.deletar(produto);
        String msg = "Excluído com sucesso!";
        model.addAttribute("msg", msg);

        return "listaProdutos";
    }

    @RequestMapping("listaProdutos")
    public String CarregaListaProdutos(Model model) {
        return "listaProdutos";
    }

    @RequestMapping(value = "salvarProduto")
    public String salvarProduto(
            @RequestParam(value = "file", required = false) MultipartFile file,
            @ModelAttribute("Produto") Produto produto) throws IOException {

        produto.setImagem(file.getBytes());
        Date x = new Date();

        produto.setDataCadastro(x);

        DAOProduto dao = new DAOProduto();

        if (dao.salvarProduto(produto)) {
            System.out.println("Cadastro efetuado com sucesso!");
            return "listaProdutos";
        } else {
            System.out.println("Cadastro não efetuado!");
            return "cadastroProdutos ";
        }
    }

    @RequestMapping(value = "RecuperarImagem", method = RequestMethod.GET)
    public @ResponseBody
    String exibirImagem(
            @RequestParam(value = "codigo") String codigo,
            HttpServletRequest request,
            HttpServletResponse response) throws IOException {
        response.setContentType("image/jpg");

        byte[] buffer = new byte[1024];
        int bytesread = 0;

        ServletOutputStream out = response.getOutputStream();
        InputStream is;

        DAOProduto dao = new DAOProduto();
        Produto produto = dao.buscarPeloCodigo(codigo);
        if (produto.getImagem() == null) {
            is = request.getSession().getServletContext().getResourceAsStream("produtoSemFoto.png");
            while ((bytesread = is.read(buffer)) != -1) {
                out.write(buffer, 0, bytesread);
            }

        } else {
            is = new ByteArrayInputStream(produto.getImagem());
            while ((bytesread = is.read(buffer)) != -1) {
                out.write(buffer, 0, bytesread);
            }

            out.flush();
        }
        out.close();
        is.close();
        return "imagem;";
    }

    @RequestMapping("grid")
    public @ResponseBody
    String grid() {
        List<Produto> listaProdutos;
        String tmp;
        DAOProduto dao = new DAOProduto();
        listaProdutos = dao.obterProdutos();
        JSONArray json = new JSONArray();
        Map<String, String> data = new HashMap<>();
        for (int i = 0; i < listaProdutos.size(); i++) {
            data.put("codigo", listaProdutos.get(i).getCodigo());
            data.put("nomeCategoria", listaProdutos.get(i).getCategoria().getNomeCategoria());
            data.put("nomeProduto", listaProdutos.get(i).getNomeProduto());
            data.put("quantidadeProduto", listaProdutos.get(i).getQuantidadeProduto() + "");
            data.put("preco", listaProdutos.get(i).getPreco() + "");
            data.put("editar", "<a class='btn btn-primary' href='editarProdutos?codigo=" + listaProdutos.get(i).getCodigo() + "'>Editar</a>"
                    + " " + "<a class='btn btn-danger' href='excluirProdutos?codigo=" + listaProdutos.get(i).getCodigo() + "'>Excluir</a>");
            json.put(data);
        }
        tmp = "{\"data\":" + json.toString() + "}";
        return tmp;
    }

    @RequestMapping("comprarProdutos")
    public String CarregaComprarProdutos(Model model) {
        model.addAttribute("Produto", new Produto());
        return "comprarProdutos";
    }
    
    @RequestMapping("filtrarPorCategoria")
    public @ResponseBody String filtrarPorCategoria(@RequestParam(value = "categorias") String categorias) {
        List<Produto> produtos;
        System.out.println("lista de categorias: "+categorias);
        DAOProduto dao = new DAOProduto();
        produtos = dao.obterPelaCategoria(categorias);
        JSONArray json = new JSONArray();
        Map<String, String> data = new HashMap<>();
        for (int i = 0; i < produtos.size(); i++) {
            data.put("codigo", produtos.get(i).getCodigo());
            data.put("nomeCategoria", produtos.get(i).getCategoria().getNomeCategoria());
            data.put("nomeProduto", produtos.get(i).getNomeProduto());
            data.put("quantidadeProduto", produtos.get(i).getQuantidadeProduto() + "");
            data.put("preco", produtos.get(i).getPreco() + "");
            json.put(data);
        }
        String tmp = "{\"data\":" + json.toString() + "}";
        return tmp;
    }

}
